/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "XUartPs.h"
#include "xtmrctr.h"
#include "xscugic.h"
#include "xil_exception.h"
#include "MastcamSupport.h"

//Defines for AXI Timer parameters
#define TMRCTR_DEVICE_ID		XPAR_TMRCTR_0_DEVICE_ID
#define TMRCTR_INTERRUPT_ID		XPAR_FABRIC_TMRCTR_0_VEC_ID
#define INTC_DEVICE_ID			XPAR_SCUGIC_SINGLE_DEVICE_ID
#define TIMER_CNTR_0				0

#define RESET_VALUE	 0xFFcf0000

//GIC is the interrupt controller
#define INTC		XScuGic
#define INTC_HANDLER	XScuGic_InterruptHandler

#define a 0x61 //left
#define d 0x64 //right
#define s 0x73 //down
#define w 0x77 //up

typedef struct{
	XUartPs ps_uart;
	XTmrCtr tmr_ctr;
	XScuGic int_cntrl;
} MainHw;


//prototypes//////////////////////////////////////////////////////////////////////////
int MainHwInit(MainHw* main_hw);

int TmrCtrInit(INTC* IntcInstancePtr,
			XTmrCtr* InstancePtr,
			u16 DeviceId,
			u16 IntrId,
			u8 TmrCtrNumber);

int TmrCtrSetupIntrSystem(INTC* IntcInstancePtr,
				XTmrCtr* TmrCtrInstancePtr,
				u16 DeviceId,
				u16 IntrId,
				u8 TmrCtrNumber);

void TimerCounterHandler(void *CallBackRef, u8 TmrCtrNumber);

void TmrCtrDisableIntr(INTC* IntcInstancePtr, u16 IntrId);
///////////////////////////////////////////////////////////////////////////////////////

//Global Hardware Variables
XTmrCtr TimerCounter;
INTC InterruptController;

volatile int TimerExpired;
////////////////////////////////

int main()
{
	Mastcam Mast;
	MainHw Main_Hw;

    unsigned char *rec_byte;
    int rec_cnt;
    int status;


    init_platform();

    //Initialize exception table
    Xil_ExceptionInit();
    //Enable non-critical exceptions
    Xil_ExceptionEnable();

    //initialize system hardware
    status = MainHwInit(&Main_Hw);
        if(status != XST_SUCCESS){
        	return XST_FAILURE;
        }
    mastcam_init(Main_Hw.int_cntrl, &Mast);



    while(1){

    	while(TimerExpired != 1){
    		//wait for timer to expire
    	}
    	TimerExpired = 0;

    	rec_cnt = XUartPs_Recv(&(main_hw.ps_uart), rec_byte, 16);

    	if(rec_cnt != 0){
    		switch(*rec_byte){
				case(a):
					if(!(Mast.move_state & LEFT))
						mastcam_move(&Mast,LEFT);
				break;

				case(d):
					if(!(Mast.move_state & RIGHT))
						mastcam_move(&Mast,RIGHT);
				break;

				case(s):
					if(!(Mast.move_state & DOWN))
						mastcam_move(&Mast,DOWN);
				break;

				case(w):
					if(!(Mast.move_state & UP))
						mastcam_move(&Mast,UP);
				break;
    		}
    	}
    	else if(Mast.move_state != STOP){
    		mastcam_move(&Mast,STOP);
    	}
    }

	 cleanup_platform();
	 return 0;

}


int MainHwInit(MainHw *main_hw){
	XUartPs_Config *ps_uart_cfg;
	XScuGic_Config *int_cntrl_cfg;

	int status;

	//Initialize gic for hardware interrupt control///////////////////////////////
	int_cntrl_cfg = XScuGic_LookupConfig(INTC_DEVICE_ID);
	if(NULL == int_cntrl_cfg){
		return XST_FAILURE;
	}
	status = XScuGic_CfgInitialize(&(main_hw->int_cntrl), int_cntrl_cfg,
			int_cntrl_cfg->CpuBaseAddress);
	if (status != XST_SUCCESS) {
		return XST_FAILURE;
	}
	/////////////////////////////////////////////////////////////////////////////


	//Initialize ps uart for interaction w/ user////////////////////////////////
	ps_uart_cfg = XUartPs_LookupConfig(XPAR_XUARTPS_0_DEVICE_ID);
	status = XUartPs_CfgInitialize(&(main_hw->ps_uart), ps_uart_cfg, XPAR_PS7_UART_1_BASEADDR);
	if(status != XST_SUCCESS){
		xil_printf("PS Uart initialization failed! \n");
		return XST_FAILURE;
	}
	////////////////////////////////////////////////////////////////////////////


	//Initialize Timer counter for timing uart sampling//////////////////////////////////////////////////////
	status = XTmrCtr_Initialize(&(main_hw->tmr_ctr), TMRCTR_DEVICE_ID);
	if(status != XST_SUCCESS){
		return XST_FAILURE;
	}

	status = XTmrCtr_SelfTest(&(main_hw->tmr_ctr), TIMER_CNTR_0);
	if(status != XST_SUCCESS){
		return XST_FAILURE;
	}

	status = TmrCtrSetupIntrSystem(&(main_hw->int_cntrl), &(main_hw->tmr_ctr), TMRCTR_DEVICE_ID,
								   TMRCTR_INTERRUPT_ID, TIMER_CNTR_0);
	if (status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	XTmrCtr_SetOptions(&(main_hw->tmr_ctr), TIMER_CNTR_0, XTC_INT_MODE_OPTION | XTC_AUTO_RELOAD_OPTION);
	XTmrCtr_SetResetValue(&(main_hw->tmr_ctr), TIMER_CNTR_0, RESET_VALUE);
	XTmrCtr_Start(&(main_hw->tmr_ctr), TIMER_CNTR_0);
	///////////////////////////////////////////////////////////////////////////////////////////////////////////


	return XST_SUCCESS;

}


int TmrCtrInit(INTC* IntcInstancePtr,
				XTmrCtr* InstancePtr,
				u16 DeviceId,
				u16 IntrId,
				u8 TmrCtrNumber)
{
	int Status;

	/*
	 * Initialize the timer counter so that it's ready to use,
	 * specify the device ID that is generated in xparameters.h
	 */
	Status = XTmrCtr_Initialize(InstancePtr, DeviceId);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Perform a self-test to ensure that the hardware was built
	 * correctly, use the 1st timer in the device (0)
	 */
	Status = XTmrCtr_SelfTest(InstancePtr, TmrCtrNumber);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Connect the timer counter to the interrupt subsystem such that
	 * interrupts can occur.  This function is application specific.
	 */
	Status = TmrCtrSetupIntrSystem(IntcInstancePtr,
					InstancePtr,
					DeviceId,
					IntrId,
					TmrCtrNumber);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Setup the handler for the timer counter that will be called from the
	 * interrupt context when the timer expires, specify a pointer to the
	 * timer counter driver instance as the callback reference so the handler
	 * is able to access the instance data
	 */
	XTmrCtr_SetHandler(InstancePtr, TimerCounterHandler,
					   InstancePtr);

	/*
	 * Enable the interrupt of the timer counter so interrupts will occur
	 * and use auto reload mode such that the timer counter will reload
	 * itself automatically and continue repeatedly, without this option
	 * it would expire once only
	 */
	XTmrCtr_SetOptions(InstancePtr, TmrCtrNumber,
				XTC_INT_MODE_OPTION | XTC_AUTO_RELOAD_OPTION);

	/*
	 * Set a reset value for the timer counter such that it will expire
	 * eariler than letting it roll over from 0, the reset value is loaded
	 * into the timer counter when it is started
	 */
	XTmrCtr_SetResetValue(InstancePtr, TmrCtrNumber, RESET_VALUE);

	/*
	 * Start the timer counter such that it's incrementing by default,
	 * then wait for it to timeout a number of times
	 */
	XTmrCtr_Start(InstancePtr, TmrCtrNumber);

	return XST_SUCCESS;

}



int TmrCtrSetupIntrSystem(INTC* IntcInstancePtr,
				 XTmrCtr* TmrCtrInstancePtr,
				 u16 DeviceId,
				 u16 IntrId,
				 u8 TmrCtrNumber)
{
	int Status;



	XScuGic_SetPriorityTriggerType(IntcInstancePtr, IntrId,
				0xA0, 0x3);

	/*
	* Connect the interrupt handler that will be called when an
	* interrupt occurs for the device.
	*/
	Status = XScuGic_Connect(IntcInstancePtr, IntrId,
			 (Xil_ExceptionHandler)XTmrCtr_InterruptHandler,
			 TmrCtrInstancePtr);
	if (Status != XST_SUCCESS) {
		return Status;
	}


	XScuGic_Enable(IntcInstancePtr, IntrId);


	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
					(Xil_ExceptionHandler)
					INTC_HANDLER,
					IntcInstancePtr);


	XTmrCtr_SetHandler(TmrCtrInstancePtr, TimerCounterHandler,
						   TmrCtrInstancePtr);

	return XST_SUCCESS;
}


void TimerCounterHandler(void *CallBackRef, u8 TmrCtrNumber)
{
	XTmrCtr *InstancePtr = (XTmrCtr *)CallBackRef;


	if (XTmrCtr_IsExpired(InstancePtr, TmrCtrNumber)) {
		TimerExpired = 1;
	}

}


