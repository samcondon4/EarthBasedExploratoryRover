/*
 * MastcamSupport.c
 *
 *  Created on: Jan 3, 2021
 *      Author: thoma
 */

#include "MastcamSupport.h"
#include "xil_exception.h"

#define MASTCAM_UART_DEV_ID			XPAR_UARTLITE_0_DEVICE_ID
#define MASTCAM_UART_DEV_INT_ID		XPAR_FABRIC_UARTLITE_0_VEC_ID
#define INTC_DEVICE_ID				XPAR_SCUGIC_SINGLE_DEVICE_ID

//Defines to build Mast control buffers///////////////////////////
#define MOVE_BUF_SIZE 			10
#define MOVETO_BUF_SIZE			10
#define READ_POS_BUF_SIZE_TX	6
#define READ_POS_BUF_SIZE_RX	8

#define PAN_MOTOR_ID				0x01
#define TILT_MOTOR_ID				0x02

#define LX16A_HEADER 				0x55
#define SERVO_MOVE_TIME_WRITE		0x01
#define SERVO_POS_READ				0x1c
#define SERVO_OR_MOTOR_MODE_WRITE	0x1d

#define SERVO_MOVE_TIME				1000 //servos move to position in 1000 ms.
///////////////////////////////////////////////////////////////////

//private function prototypes
static int UartLiteSetupInterruptSystem(XScuGic *Intc, XUartLite *UartLitePtr, int IntrId);
void SendHandler(void *CallbackRef, unsigned int EventData);
void RecvHandler(void *CallbackRef, unsigned int EventData);
unsigned char lobot_checksum(unsigned char *buf);
void tx_pend(int buf_size);
void rx_pend(int buf_size);

//globals for count of send/receive data volume
static volatile int TotalReceivedCount;
static volatile int TotalSentCount;

//Fixed buffers for Mast position control
static unsigned char left_spin_buf[MOVE_BUF_SIZE] = {LX16A_HEADER, LX16A_HEADER, PAN_MOTOR_ID, 0x07, SERVO_OR_MOTOR_MODE_WRITE, 0x01, 0x00, 0x2c, 0x01, 0xac};
static unsigned char right_spin_buf[MOVE_BUF_SIZE] = {LX16A_HEADER, LX16A_HEADER, PAN_MOTOR_ID, 0x07, SERVO_OR_MOTOR_MODE_WRITE, 0x01, 0x00, 0xd4, 0xfe, 0x07};
static unsigned char up_spin_buf[MOVE_BUF_SIZE] = {LX16A_HEADER, LX16A_HEADER, TILT_MOTOR_ID, 0x07, SERVO_OR_MOTOR_MODE_WRITE, 0x01, 0x00, 0x2c, 0x01, 0xab};
static unsigned char down_spin_buf[MOVE_BUF_SIZE] = {LX16A_HEADER, LX16A_HEADER, TILT_MOTOR_ID, 0x07, SERVO_OR_MOTOR_MODE_WRITE, 0x01, 0x00, 0xd4, 0xfe, 0x06};
static unsigned char pan_stop_buf[MOVE_BUF_SIZE] = {LX16A_HEADER, LX16A_HEADER, PAN_MOTOR_ID, 0x07, SERVO_OR_MOTOR_MODE_WRITE, 0x01, 0x00, 0x00, 0x00, 0xd9};
static unsigned char tilt_stop_buf[MOVE_BUF_SIZE] = {LX16A_HEADER, LX16A_HEADER, TILT_MOTOR_ID, 0x07, SERVO_OR_MOTOR_MODE_WRITE, 0x01, 0x00, 0x00, 0x00, 0xd8};

static unsigned char pan_read_pos_buf[READ_POS_BUF_SIZE_TX] = {LX16A_HEADER, LX16A_HEADER, PAN_MOTOR_ID, 0x03, SERVO_POS_READ, 0xdf};
static unsigned char tilt_read_pos_buf[READ_POS_BUF_SIZE_TX] = {LX16A_HEADER, LX16A_HEADER, TILT_MOTOR_ID, 0x03, SERVO_POS_READ, 0xde};

//Initialize uart device that will control mastcam actuators as well as interrupt controller
int mastcam_init(XScuGic *Intc, Mastcam *mastcam){

	int ret;
	int Status;

	ret = XST_SUCCESS;

	//Initialize the UartLite driver so that it is ready to use.
	Status = XUartLite_Initialize(&(mastcam->uart_dev), MASTCAM_UART_DEV_ID);
	if (Status != XST_SUCCESS) {
		ret = XST_FAILURE;
	}

	//Perform a self-test to ensure that the hardware was built correctly
	Status = XUartLite_SelfTest(&(mastcam->uart_dev));
	if (Status != XST_SUCCESS) {
		ret = XST_FAILURE;
	}

	Status = UartLiteSetupInterruptSystem(Intc, &(mastcam->uart_dev), MASTCAM_UART_DEV_INT_ID);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}


	return ret;
}

//Move given mastcam instance in specified direction at fixed speed
int mastcam_move(Mastcam *mastcam, int direction){

	int ret;

	ret = XST_SUCCESS;

	mastcam->move_state |= direction;

	switch(direction){

		case(UP):
			XUartLite_Send(&(mastcam->uart_dev), up_spin_buf, MOVE_BUF_SIZE);
			tx_pend(MOVE_BUF_SIZE);
		break;

		case(DOWN):
			XUartLite_Send(&(mastcam->uart_dev), down_spin_buf, MOVE_BUF_SIZE);
			tx_pend(MOVE_BUF_SIZE);
		break;

		case(LEFT):
			XUartLite_Send(&(mastcam->uart_dev), left_spin_buf, MOVE_BUF_SIZE);
			tx_pend(MOVE_BUF_SIZE);
		break;

		case(RIGHT):
			XUartLite_Send(&(mastcam->uart_dev), right_spin_buf, MOVE_BUF_SIZE);
			tx_pend(MOVE_BUF_SIZE);
		break;

		case(STOP):
			XUartLite_Send(&(mastcam->uart_dev), pan_stop_buf, MOVE_BUF_SIZE);
			tx_pend(MOVE_BUF_SIZE);

			XUartLite_Send(&(mastcam->uart_dev), tilt_stop_buf, MOVE_BUF_SIZE);
			tx_pend(MOVE_BUF_SIZE);

			mastcam->move_state = STOP;

		break;

	}


	return ret;

}

void mastcam_moveto(Mastcam *mastcam, char motor_id, short position){

	unsigned char buf[10];

	buf[0] = buf[1] = LX16A_HEADER;
	buf[2] = motor_id;
	buf[3] = 7;
	buf[4] = SERVO_MOVE_TIME_WRITE;
	buf[5] = (unsigned char)(position & 0x00ff);
	buf[6] = (unsigned char)((position & 0xff00) >> 8);
	buf[7] = (unsigned char)(SERVO_MOVE_TIME & 0x00ff);
	buf[8] = (unsigned char)((SERVO_MOVE_TIME & 0xff00) >> 8);
	buf[9] = lobot_checksum(buf);

	for(int i = 0; i < 10; i++){
		xil_printf("\n\n moveto buffer index %i: %02x", i, buf[i]);
	}

	XUartLite_Send(&(mastcam->uart_dev), buf, MOVETO_BUF_SIZE);
	tx_pend(MOVETO_BUF_SIZE);
}

//Update position values in the passed mastcam structure
int mastcam_getpos(Mastcam *mastcam, short *azimuth_pos, short *zenith_pos){

	unsigned char recv_buf[8];

	XUartLite_Send(&(mastcam->uart_dev), pan_read_pos_buf, READ_POS_BUF_SIZE_TX);
	tx_pend(READ_POS_BUF_SIZE_TX);

	XUartLite_Recv(&(mastcam->uart_dev), recv_buf, READ_POS_BUF_SIZE_RX);
	rx_pend(READ_POS_BUF_SIZE_RX);

	//Check if header was received. If this misses things, implement a checksum check
	if(recv_buf[0] == 0x55 && recv_buf[1] == 0x55){
		*azimuth_pos = (recv_buf[5]) | (recv_buf[6] << 8);
		//print position data
		for(int i = 0; i < READ_POS_BUF_SIZE_RX; i++){
			xil_printf("azimuth position data at index %i: %02x \n\r", i, recv_buf[i]);
		}
	}
	else{
		xil_printf("error reading azimuth position...");
		return XST_FAILURE;
	}


	XUartLite_Send(&(mastcam->uart_dev), tilt_read_pos_buf, READ_POS_BUF_SIZE_TX);
	tx_pend(READ_POS_BUF_SIZE_TX);

	XUartLite_Recv(&(mastcam->uart_dev), recv_buf, READ_POS_BUF_SIZE_RX);
	rx_pend(READ_POS_BUF_SIZE_RX);

	//Check if header was received. If this misses things, implement a checksum check
	if(recv_buf[0] == 0x55 && recv_buf[1] == 0x55){
		*zenith_pos = (recv_buf[5]) | (recv_buf[6] << 8);
		//print position data
		for(int i = 0; i < READ_POS_BUF_SIZE_RX; i++){
			xil_printf("zenith position data at index %i: %02x \n\r", i, recv_buf[i]);
		}
	}
	else{
		xil_printf("error reading zenith position...");
		return XST_FAILURE;
	}




	xil_printf("\n\r");

	return XST_SUCCESS;
}


static int UartLiteSetupInterruptSystem(XScuGic *Intc, XUartLite *UartLitePtr, int IntrId)
{
	int Status;

	XScuGic_SetPriorityTriggerType(Intc, IntrId, 0x90, 0x03);

	Status = XScuGic_Connect(Intc, IntrId, (Xil_ExceptionHandler)XUartLite_InterruptHandler,
							 UartLitePtr);
	if(Status != XST_SUCCESS){
		return Status;
	}

	XScuGic_Enable(Intc, IntrId);

	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT, (Xil_ExceptionHandler) XScuGic_InterruptHandler, Intc);

	XUartLite_SetSendHandler(UartLitePtr, SendHandler, UartLitePtr);
	XUartLite_SetRecvHandler(UartLitePtr, RecvHandler, UartLitePtr);

	XUartLite_EnableInterrupt(UartLitePtr);

	return XST_SUCCESS;
}


unsigned char lobot_checksum(unsigned char *buf){
	unsigned char i;
	unsigned short temp = 0;

	for (i = 2; i < buf[3] + 2; i++) {
		temp += buf[i];
	}

	temp = ~temp;
	i = (unsigned char)temp;
	return i;
}

void SendHandler(void *CallbackRef, unsigned int EventData){
	TotalSentCount = EventData;
}

void RecvHandler(void *CallbackRef, unsigned int EventData){
	TotalReceivedCount = EventData;
}

//This function blocks until UartLite transmit has completed
void tx_pend(int buf_size){
	while(TotalSentCount != buf_size){
		//pend
	}
	TotalSentCount = 0;
}

void rx_pend(int buf_size){
	while(TotalReceivedCount != buf_size){
		//pend
	}
	TotalReceivedCount = 0;
}

